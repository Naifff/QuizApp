package org.example.quizapp.application.impl;

import org.example.quizapp.application.QuizService;
import org.example.quizapp.domain.Question;
import org.example.quizapp.domain.QuestionType;
import org.example.quizapp.infrastructure.QuestionLoader;
import org.springframework.stereotype.Service;

import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.concurrent.atomic.AtomicInteger;

@Service
public class QuizServiceImpl implements QuizService {
	private final QuestionLoader questionLoader;

	public QuizServiceImpl(QuestionLoader questionLoader) {
		this.questionLoader = questionLoader;
	}

	@Override
	public List<Question> getQuestions() {
		List<Question> questions = questionLoader.loadQuestions();

		if (questions.isEmpty()) {
			System.out.println("‚ùå –û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!");
		} else {
			System.out.println("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: " + questions.size());
		}

		return questions;
	}

	@Override
	public int calculateScore(List<String> answers) {
		List<Question> questions = getQuestions();
		int score = 0;

		if (answers == null || answers.isEmpty()) {
			System.out.println("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–ª –æ—Ç–≤–µ—Ç—ã!");
			return 0;
		}

		if (questions.size() != answers.size()) {
			System.out.println("‚ö†Ô∏è –ù–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ.");
		}

		for (int i = 0; i < Math.min(answers.size(), questions.size()); i++) {
			Question question = questions.get(i);
			String userAnswer = answers.get(i).trim();

			if (question.getCorrectAnswers().contains(userAnswer)) {
				score++;
			}
		}

		System.out.println("‚úÖ –ò—Ç–æ–≥–æ–≤—ã–π —Å—á–µ—Ç: " + score);
		return score;
	}

	@Override
	public int calculateScore(Map<String, String[]> userAnswers, List<Question> questions) {
		int score = 0;

		for (Question question : questions) {
			String key = "answer_" + question.getId();
			String[] userResponse = userAnswers.get(key);

			if (userResponse != null) {
				List<String> userChoices = Arrays.asList(userResponse);
				List<String> correctAnswers = question.getCorrectAnswers();

				System.out.println("‚ùì –í–æ–ø—Ä–æ—Å: " + question.getText());
				System.out.println("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã: " + correctAnswers);
				System.out.println("üîç –û—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + userChoices);

				// ‚úÖ –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ questionType —Å—Ç—Ä–æ–∫–æ–π


String questionType =  question.getQuestionType();
				// ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º MULTIPLE_CHOICE
				if (questionType .equals("MULTIPLE_CHOICE")) {
					if (userChoices.containsAll(correctAnswers) && correctAnswers.containsAll(userChoices)) {
						score++;
						System.out.println("üéØ –í–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç! +1 –±–∞–ª–ª");
					} else {
						System.out.println("‚ùå –û—à–∏–±–∫–∞. –û—Ç–≤–µ—Ç—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç.");
					}
				}
				// ‚úÖ –î–ª—è SINGLE_CHOICE –∏ TEXT –ø—Ä–æ—Å—Ç–æ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏
				else {
					if (correctAnswers.contains(userChoices.get(0))) {
						score++;
						System.out.println("üéØ –í–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç! +1 –±–∞–ª–ª");
					} else {
						System.out.println("‚ùå –û—à–∏–±–∫–∞. –ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç.");
					}
				}
			}
		}

		System.out.println("üî¢ –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª: " + score);
		return score;
	}





}
